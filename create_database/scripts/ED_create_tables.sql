-- create_tables.sql (final)
SET DEFINE OFF
SET ECHO ON
SET FEEDBACK ON
SET SERVEROUTPUT ON
WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT 9

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_HistoriserPrix PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_LOUER PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_RESERVERPRIVE PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_RESERVERSOC PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_CLIENT PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_SOCIETE PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_VEHICULE PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_GAMME PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ED_MARQUE PURGE';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

-- Create dimension tables first
CREATE TABLE ED_MARQUE (
  CodeMA          NUMBER       PRIMARY KEY,
  NomMA           VARCHAR2(20) NOT NULL,
  PaysMA          VARCHAR2(30) NOT NULL,
  DateCreationMA  DATE         NOT NULL
);

CREATE TABLE ED_GAMME (
  CodeG    NUMBER       PRIMARY KEY,
  NomG     VARCHAR2(20) NOT NULL,
  PrixKM   NUMBER(8,2)  CHECK (PrixKM  > 0),
  PrixJour NUMBER(8,2)  CHECK (PrixJour> 0),
  PrixBase NUMBER(8,2)  CHECK (PrixBase> 0)
);

CREATE TABLE ED_SOCIETE (
  CodeSoc  CHAR(14)     PRIMARY KEY,
  NomSoc   VARCHAR2(40) NOT NULL,
  RueSoc   VARCHAR2(50) NOT NULL,
  CPSoc    CHAR(5)      NOT NULL,
  VilleSoc VARCHAR2(50) NOT NULL
);

CREATE TABLE ED_VEHICULE (
  NoImmat   VARCHAR2(9)  PRIMARY KEY,
  Modele    VARCHAR2(20) NOT NULL,
  DateAchat DATE         NOT NULL,
  CodeG     NUMBER       NOT NULL REFERENCES ED_GAMME(CodeG),
  CodeMA    NUMBER       NOT NULL REFERENCES ED_MARQUE(CodeMA),
  CONSTRAINT chk_noimmat_format CHECK (REGEXP_LIKE(NoImmat, '^[A-Z]{2}-[0-9]{3}-[A-Z]{2}$'))
);

CREATE TABLE ED_CLIENT (
  CodeC   NUMBER        PRIMARY KEY,
  NomC    VARCHAR2(50)  NOT NULL,
  PrenomC VARCHAR2(50)  NOT NULL,
  RueC    VARCHAR2(50)  NOT NULL,
  CPC     CHAR(5)       NOT NULL,
  VilleC  VARCHAR2(50)  NOT NULL,
  RegionC VARCHAR2(50)  NOT NULL,
  CodeSoc CHAR(14)      NULL REFERENCES ED_SOCIETE(CodeSoc)
);

-- Facts / transactions
CREATE TABLE ED_LOUER (
  CodeC      NUMBER       NOT NULL REFERENCES ED_CLIENT(CodeC),
  NoImmat    VARCHAR2(9)  NOT NULL REFERENCES ED_VEHICULE(NoImmat),
  DateDebLoc DATE         NOT NULL,
  DateFinLoc DATE         NOT NULL,
  KmDeb      NUMBER       NOT NULL CHECK (KmDeb > 0),
  KmFin      NUMBER       NOT NULL,
  CONSTRAINT pk_louer PRIMARY KEY (CodeC, NoImmat, DateDebLoc),
  CONSTRAINT chk_louer_km CHECK (KmFin > KmDeb),
  CONSTRAINT chk_louer_dates CHECK (DateFinLoc >= DateDebLoc)
);

CREATE TABLE ED_RESERVERPRIVE (
  CodeC      NUMBER       NOT NULL REFERENCES ED_CLIENT(CodeC),
  DateDebClt DATE         NOT NULL,
  CodeG      NUMBER       NOT NULL REFERENCES ED_GAMME(CodeG),
  DateFinClt DATE         NOT NULL,
  DateResa   DATE         NOT NULL,
  CONSTRAINT pk_reserverprive PRIMARY KEY (CodeC, DateDebClt, CodeG),
  CONSTRAINT chk_res_prv_dates CHECK (DateFinClt >= DateDebClt AND DateDebClt >= DateResa)
);

CREATE TABLE ED_RESERVERSOC (
  CodeSoc     CHAR(14)    NOT NULL REFERENCES ED_SOCIETE(CodeSoc),
  DateDebSoc  DATE        NOT NULL,
  CodeG       NUMBER      NOT NULL REFERENCES ED_GAMME(CodeG),
  DateFinSoc  DATE        NOT NULL,
  DateResaSoc DATE        NOT NULL,
  CONSTRAINT pk_reserversoc PRIMARY KEY (CodeSoc, DateDebSoc, CodeG),
  CONSTRAINT chk_res_soc_dates CHECK (DateFinSoc >= DateDebSoc AND DateDebSoc >= DateResaSoc)
);

-- Useful indices
CREATE INDEX idx_louer_dates    ON ED_LOUER(DateDebLoc, DateFinLoc);
CREATE INDEX idx_resprv_dates   ON ED_RESERVERPRIVE(DateDebClt, DateFinClt);
CREATE INDEX idx_ressoc_dates   ON ED_RESERVERSOC(DateDebSoc, DateFinSoc);
PROMPT DDL completed.
EXIT
